git config user.name  使用者name
git config user.email 使用者email

1. git init   初始化git仓库
2. git status 查看仓库当前的状态
3. git diff 
    .暂存区有文件的时候，查看工作区和暂存区的差别
    .暂存区没有文件的时候，查看工作区和上次提交到版本库中的文件的差别
    .git diff HEAD --readme.txt 查看版本库中readme.txt文件和工作区中的readme.txt文件的区别
    HEAD指向版本库中的当前版本
4. git add  文件修改提交到暂存区
5. git commit 提交更改，即把暂存区的内容提交到当前分支（参数 -m 后面跟备注）
6. git log 查看历史提交记录，后面有很多参数可用，比如 --pretty=oneline(每个提交信息单行显示)
7. git reset --hard HEAD^ (回退到上一个版本，HEAD^^回退到上上个版本，HEAD~100回退到前100个版本)
   git reset --hard 1e650aa (1e650aa是提交版本的哈希，回到哈希值为1e650aa的版本)
   git reflog  记录每次操作的命令，可用获得各个版本的哈希值
8. git checkout --readme.txt 把工作区的修改全被撤销，即，让这个文件回到最近一次git commit 或者 git add 后 的状态
9. git reset HEAD readme.txt 把暂存区的修改全部撤销掉,重新放回工作区
10. 远程仓库  
    创建ssh key $ ssh-keygen -t ras -C "youremail@example.com",使用默认值就可以了
    在用户目录中找到.ssh目录 id_rsa.pub是公钥
    在github中的SSH key中 在文本框里粘贴id_rsa.pub的内容
    本地仓库和github仓库关联，本地仓库运行 $ git remote add origin git@github.com:kevinJser/gitstudy.git (后面的为github上仓库的ssh地址)
11. git push origin master 提交
12. git clone ......  克隆

13. git checkout -b dev  创建分支dev
    相当于两步操作 git branch dev    git checkout dev
14. git branch 查看当前分支
15. git merge dev  合并指定分支到当前分支 (Fast-forward,快进模式) 也就是直接把master指向dev的当前提交
16. git branch -d dev  删除dev分支
